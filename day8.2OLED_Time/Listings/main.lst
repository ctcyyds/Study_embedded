C51 COMPILER V9.60.7.0   MAIN                                                              04/20/2023 09:24:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\instal\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.h"
   3          #include "delay.h"
   4          #include "UART.h"
   5          #include <stdio.h>
   6          #include "PCF8563.h"
   7          #include "I2C.h"
   8          #include "oled.h"
   9          
  10          char putchar (char dat) {
  11   1          TX1_write2buff(dat);
  12   1          return dat;
  13   1      }
  14          
  15          void GPIO_config(void) {
  16   1          GPIO_InitTypeDef GPIO_InitStructure;//结构定义
  17   1          GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
  18   1          GPIO_InitStructure.Pin=GPIO_Pin_3 | GPIO_Pin_2;//指定要初始化的IO
  19   1          GPIO_Inilize(GPIO_P3, &GPIO_InitStructure);//初始化
  20   1      }
  21          
  22          void UART_config(void) {
  23   1          COMx_InitDefine        COMx_InitStructure;                    //结构定义
  24   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;    //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bi
             -t,UART_9bit_BRTx
  25   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;            //选择波特率发生器, BRT_Timer1, BRT_Timer2 
             -(注意: 串口2固定使用BRT_Timer2)
  26   1          COMx_InitStructure.UART_BaudRate  = 115200ul;            //波特率, 一般 110 ~ 115200
  27   1          COMx_InitStructure.UART_RxEnable  = ENABLE;                //接收允许,   ENABLE或DISABLE
  28   1          COMx_InitStructure.BaudRateDouble = DISABLE;            //波特率加倍, ENABLE或DISABLE
  29   1          COMx_InitStructure.UART_Interrupt = ENABLE;                //中断允许,   ENABLE或DISABLE
  30   1          COMx_InitStructure.UART_Priority  = Priority_0;            //指定中断优先级(低到高) Priority_0,Priorit
             -y_1,Priority_2,Priority_3
  31   1          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;    //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P
             -37,UART1_SW_P16_P17,UART1_SW_P43_P44
  32   1          UART_Configuration(UART1, &COMx_InitStructure);        //初始化串口1 UART1,UART2,UART3,UART4
  33   1      }
  34          
  35          void I2C_config(void)
  36          {
  37   1          I2C_InitTypeDef   I2C_InitStructure;
  38   1          I2C_InitStructure.I2C_Mode      = I2C_Mode_Master;  //主从选择   I2C_Mode_Master, I2C_Mode_Slave
  39   1          I2C_InitStructure.I2C_Enable    = ENABLE;           //I2C功能使能,   ENABLE, DISABLE
  40   1          I2C_InitStructure.I2C_MS_WDTA   = DISABLE;          //主机使能自动发送,  ENABLE, DISABLE
  41   1          I2C_InitStructure.I2C_MS_Interrupt = DISABLE;       //使能主机模式中断,  ENABLE, DISABLE
  42   1          I2C_InitStructure.I2C_Speed     = 13;               //总线速度=Fosc/2/(Speed*2+4),      0~63
  43   1          I2C_InitStructure.I2C_IoUse     = I2C_P33_P32;      //IO口切换   I2C_P14_P15, I2C_P24_P25, I2C_P33_P32
  44   1      
  45   1          I2C_Init(&I2C_InitStructure);
  46   1      }
  47          
  48          int main() {
  49   1          Clock_t c;
  50   1          u8 row1_offset_x;
C51 COMPILER V9.60.7.0   MAIN                                                              04/20/2023 09:24:21 PAGE 2   

  51   1          u8 row2_offset_x;
  52   1          GPIO_config();
  53   1          UART_config();
  54   1          I2C_config();
  55   1          PCF8563_init();
  56   1      
  57   1          OLED_Init();//初始化OLED
  58   1          OLED_ColorTurn(0);//0正常显示，1 反色显示
  59   1          OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示
  60   1          EA = 1;
  61   1      
  62   1          //获取时间，显示
  63   1          //clock
  64   1          c.year = 2023;
  65   1          c.month = 4;
  66   1          c.day = 20;
  67   1          c.weekday =4;
  68   1          c.hour = 9;
  69   1          c.minute = 13;
  70   1          c.second = 12;
  71   1          PCF8563_set_clock(c);
  72   1          row1_offset_x=20;
  73   1          row2_offset_x=26;
  74   1          while(1) {
  75   2              PCF8563_get_clock(&c);
  76   2              printf("%d-%d-%d %d", (int)c.year, (int)c.month, (int)c.day, (int)c.weekday);
  77   2              printf(" %d:%d:%d \r\n", (int)c.hour, (int)c.minute, (int)c.second);
  78   2              //年-月-日
  79   2              OLED_ShowNum(row1_offset_x+0,0,c.year,4,16);
  80   2              OLED_ShowChar(row1_offset_x+32,0,'.',16);
  81   2              if(c.month < 10) {
  82   3                  OLED_ShowNum(row1_offset_x+36,0,0,1,16);
  83   3                  OLED_ShowNum(row1_offset_x+44,0,c.month,1,16);
  84   3              } else {
  85   3                  OLED_ShowNum(row1_offset_x+36,0,c.month,2,16);
  86   3              }
  87   2              OLED_ShowChar(row1_offset_x+54,0,'.',16);
  88   2              if(c.day < 10) {
  89   3                  OLED_ShowNum(row1_offset_x+60,0,0,1,16);
  90   3                  OLED_ShowNum(row1_offset_x+72,0,c.day,1,16);
  91   3              } else {
  92   3                  OLED_ShowNum(row1_offset_x+60,0,c.day,2,16);
  93   3              }
  94   2      
  95   2              //时：分：秒
  96   2              if(c.hour < 10) {
  97   3                  OLED_ShowNum(row2_offset_x+0,4,0,1,16);
  98   3                  OLED_ShowNum(row2_offset_x+8,4,c.hour,1,16);
  99   3              } else {
 100   3                  OLED_ShowNum(row2_offset_x+0,4,c.hour,2,16);
 101   3              }
 102   2      
 103   2              OLED_ShowChar(row2_offset_x+16,4,':',16);
 104   2              if(c.minute < 10) {
 105   3                  OLED_ShowNum(row2_offset_x+24,4,0,1,16);
 106   3                  OLED_ShowNum(row2_offset_x+32,4,c.minute,1,16);
 107   3              } else {
 108   3                  OLED_ShowNum(row2_offset_x+24,4,c.minute,2,16);
 109   3              }
 110   2              OLED_ShowChar(row2_offset_x+40,4,':',16);
 111   2              if(c.second < 10) {
 112   3                  OLED_ShowNum(row2_offset_x+48,4,0,1,16);
C51 COMPILER V9.60.7.0   MAIN                                                              04/20/2023 09:24:21 PAGE 3   

 113   3                  OLED_ShowNum(row2_offset_x+56,4,c.second,1,16);
 114   3              } else {
 115   3                  OLED_ShowNum(row2_offset_x+48,4,c.second,2,16);
 116   3              }
 117   2              delay_ms(250);
 118   2              delay_ms(250);
 119   2              delay_ms(250);
 120   2              delay_ms(250);
 121   2          }
 122   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    856    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
