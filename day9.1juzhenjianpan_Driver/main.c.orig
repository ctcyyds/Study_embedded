#include "config.h"
#include "GPIO.h"
#include "UART.h"
#include "delay.h"
#include <stdio.h>
//====================
//定义行
#define ROW1 P34
#define ROW2 P35
#define ROW3 P40
#define ROW4 P41
//定义列
#define COL1 P03
#define COL2 P06
#define COL3 P07
#define COL4 P17
//====================

//定义状态记录，记录所有的
u16 key_state = 0xffff;

//开关状态对应的电平
#define KEY_DOWN  0
#define KEY_UP    1

//定义行列长度
#define ROW_NUM 4
#define COL_NUM 4

//======================================================================================
//(row * ROW_NUM) + col = idx(按钮下标)
//定义前一次状态为抬起
#define IS_KEY_UP(row,col)  ((key_state >> (row * ROW_NUM + col)) & 0x01) == KEY_UP
//定义前一次状态为按下
#define IS_KEY_DOWN(row,col)  ((key_state >> (row * ROW_NUM + col)) & 0x01) == KEY_DOWN
//======================================================================================

//======================================================================================
//记录状态Plus
#define SET_KEY_UP(row,col)    key_state |= (1 << (row * ROW_NUM + col))
#define SET_KEY_DOWN(row,col)  key_state &= ~(1 << (row * ROW_NUM + col))
//======================================================================================

//======================================================================================
//判断第几列
u8 COL_STATE(u8 col) {
    if(col == 0) return COL1;
    if(col == 1) return COL2;
    if(col == 2) return COL3;
    if(col == 3) return COL4;
    return COL1;
}
//判断哪一行输出
u8 ROW_OUT(u8 row){
	if(row == 0){ROW1 = 0;ROW2 = 1;ROW3 = 1;ROW4 = 1;}
	if(row == 1){ROW1 = 1;ROW2 = 0;ROW3 = 1;ROW4 = 1;}
	if(row == 2){ROW1 = 1;ROW2 = 1;ROW3 = 0;ROW4 = 1;}
	if(row == 3){ROW1 = 1;ROW2 = 1;ROW3 = 1;ROW4 = 0;}
//======================================================================================

char putchar (char dat) {
    TX1_write2buff(dat);
    return dat;
}

//GPIO初始化
void GPIO_config(void) {
    GPIO_InitTypeDef GPIO_InitStructure;//结构定义
    //P34 P35
    GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
    GPIO_InitStructure.Pin=GPIO_Pin_4 | GPIO_Pin_5;//指定要初始化的IO
    GPIO_Inilize(GPIO_P3, &GPIO_InitStructure);//初始化
    //P40 P41
    GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
    GPIO_InitStructure.Pin=GPIO_Pin_0 | GPIO_Pin_1;//指定要初始化的IO
    GPIO_Inilize(GPIO_P4, &GPIO_InitStructure);//初始化
    //P03 P06 P07
    GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
    GPIO_InitStructure.Pin=GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;//指定要初始化的IO
    GPIO_Inilize(GPIO_P0, &GPIO_InitStructure);//初始化
    //P17
    GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
    GPIO_InitStructure.Pin=GPIO_Pin_7;//指定要初始化的IO
    GPIO_Inilize(GPIO_P1, &GPIO_InitStructure);//初始化
}

//UART初始化
void UART_config(void) {
    COMx_InitDefine        COMx_InitStructure;                    //结构定义
    COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;    //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx
    COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;            //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)
    COMx_InitStructure.UART_BaudRate  = 115200ul;            //波特率, 一般 110 ~ 115200
    COMx_InitStructure.UART_RxEnable  = ENABLE;                //接收允许,   ENABLE或DISABLE
    COMx_InitStructure.BaudRateDouble = DISABLE;            //波特率加倍, ENABLE或DISABLE
    COMx_InitStructure.UART_Interrupt = ENABLE;                //中断允许,   ENABLE或DISABLE
    COMx_InitStructure.UART_Priority  = Priority_0;            //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
    COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;    //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
    UART_Configuration(UART1, &COMx_InitStructure);        //初始化串口1 UART1,UART2,UART3,UART4
}

void scan() {
    u8 i,j;
    //j : row; i : col;	
    for(j = 0; j < ROW_NUM; j++) {
			ROW_OUT(j);
        for(i = 0; i < COL_NUM; i++) {
            if(COL_STATE(i) == KEY_DOWN && IS_KEY_UP(j,i)) {
                printf("Down\r\n");//按钮按下电平为低
                SET_KEY_DOWN(j,i);
            } else if(COL_STATE(i) == KEY_UP && IS_KEY_DOWN(j,i)) {
                printf("Up\r\n");//按钮抬起电平为高
                SET_KEY_UP(j,i);
            }
        }
    }
    /**
     * //读取COL1状态
        //((key_state & 0x01) >> 0) == ((key_state >> 0) & 0x01)
        if(COL1 == KEY_DOWN && IS_KEY_UP(0,0)) {
            printf("Down\r\n");//按钮按下电平为低
            SET_KEY_DOWN(0,0);
        } else if(COL1 == KEY_UP && IS_KEY_DOWN(0,0)) {
            printf("Up\r\n");//按钮抬起电平为高
            SET_KEY_UP(0,0);
        }

        //读取COL2状态
        if(COL2 == KEY_DOWN && IS_KEY_UP(0,1)) {
            printf("Down\r\n");//按钮按下电平为低
            SET_KEY_DOWN(0,1);
        } else if(COL2 == KEY_UP && IS_KEY_DOWN(0,1)) {
            printf("Up\r\n");//按钮抬起电平为高
            SET_KEY_UP(0,1);
        }
    */
}
	

int main() {
    GPIO_config();
    UART_config();
    EA = 1;

    while(1) {
        delay_ms(20);
        scan();
    }
}