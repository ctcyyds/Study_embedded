C51 COMPILER V9.60.7.0   MAIN                                                              04/13/2023 20:46:36 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\instal\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.h"
   3          #include "delay.h"
   4          #include "ADC.h"
   5          #include "UART.h"
   6          #include "stdio.h"
   7          #include "NTC.h"
   8          
   9          void GPIO_config(void) {
  10   1          GPIO_InitTypeDef GPIO_InitStructure;//结构定义
  11   1          GPIO_InitStructure.Mode=GPIO_PullUp;//IO模式，GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
  12   1          GPIO_InitStructure.Pin=GPIO_Pin_0 | GPIO_Pin_1;//指定要初始化的IO
  13   1          GPIO_Inilize(GPIO_P3, &GPIO_InitStructure);//初始化
  14   1      }
  15          
  16          void ADC_config(void)
  17          {
  18   1          ADC_InitTypeDef   ADC_InitStructure;    //结构定义
  19   1          ADC_InitStructure.ADC_SMPduty   = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小
             -于 10）
  20   1          ADC_InitStructure.ADC_CsSetup   = 0;    //ADC 通道选择时间控制 0(默认),1
  21   1          ADC_InitStructure.ADC_CsHold    = 1;    //ADC 通道选择保持时间控制 0,1(默认),2,3
  22   1          ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;   //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2X
             -16T
  23   1          ADC_InitStructure.ADC_Power     = ENABLE;       //ADC功率允许/关闭  ENABLE,DISABLE
  24   1          ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUS
             -TIFIED
  25   1          ADC_InitStructure.ADC_Priority    = Priority_0;     //指定中断优先级(低到高) Priority_0,Priority_1,Prior
             -ity_2,Priority_3
  26   1          ADC_InitStructure.ADC_Interrupt = DISABLE;      //中断允许  ENABLE,DISABLE
  27   1          ADC_Inilize(&ADC_InitStructure);          //初始化
  28   1          ADC_PowerControl(ENABLE);             //单独的ADC电源操作函数, ENABLE或DISABLE
  29   1      }
  30          
  31          void UART_config(void) {
  32   1          COMx_InitDefine        COMx_InitStructure;                    //结构定义
  33   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;    //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bi
             -t,UART_9bit_BRTx
  34   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;            //选择波特率发生器, BRT_Timer1, BRT_Timer2 
             -(注意: 串口2固定使用BRT_Timer2)
  35   1          COMx_InitStructure.UART_BaudRate  = 115200ul;            //波特率, 一般 110 ~ 115200
  36   1          COMx_InitStructure.UART_RxEnable  = ENABLE;                //接收允许,   ENABLE或DISABLE
  37   1          COMx_InitStructure.BaudRateDouble = DISABLE;            //波特率加倍, ENABLE或DISABLE
  38   1          COMx_InitStructure.UART_Interrupt = ENABLE;                //中断允许,   ENABLE或DISABLE
  39   1          COMx_InitStructure.UART_Priority  = Priority_0;            //指定中断优先级(低到高) Priority_0,Priorit
             -y_1,Priority_2,Priority_3
  40   1          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;    //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P
             -37,UART1_SW_P16_P17,UART1_SW_P43_P44
  41   1          UART_Configuration(UART1, &COMx_InitStructure);        //初始化串口1 UART1,UART2,UART3,UART4
  42   1      }
  43          
  44          char putchar (char dat) {
  45   1          TX1_write2buff(dat);
  46   1          return dat;
C51 COMPILER V9.60.7.0   MAIN                                                              04/13/2023 20:46:36 PAGE 2   

  47   1      }
  48          
  49          int main() {
  50   1        int t;
  51   1          GPIO_config();
  52   1          UART_config();
  53   1          ADC_config();
  54   1          //初始化驱动
  55   1          NTC_init();
  56   1          EA = 1;
  57   1          while(1) {
  58   2              //获取温度，调用方法
  59   2              t = NTC_get_temperature();
  60   2              
  61   2              printf("%d\r\n",t);
  62   2      
  63   2              delay_ms(250);
  64   2              delay_ms(250);
  65   2              delay_ms(250);
  66   2              delay_ms(250);
  67   2          }
  68   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    157    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
