C51 COMPILER V9.60.7.0   MAIN                                                              04/28/2023 20:58:28 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\instal\Keil_v5\C51\BIN\C51.EXE User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\Driver) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "UART.h"
   2          #include "config.h"
   3          #include "GPIO.h"
   4          #include "MatrixKeys.h"
   5          #include <stdio.h>
   6          #include "Nixie.h"
   7          
   8          u8 leds[8] = {0};
   9          void GPIO_config(void) {
  10   1      
  11   1      }
  12          
  13          void UART_config(void) {
  14   1          COMx_InitDefine        COMx_InitStructure;                    //结构定义
  15   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;    //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bi
             -t,UART_9bit_BRTx
  16   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;            //选择波特率发生器, BRT_Timer1, BRT_Timer2 
             -(注意: 串口2固定使用BRT_Timer2)
  17   1          COMx_InitStructure.UART_BaudRate  = 115200ul;            //波特率, 一般 110 ~ 115200
  18   1          COMx_InitStructure.UART_RxEnable  = ENABLE;                //接收允许,   ENABLE或DISABLE
  19   1          COMx_InitStructure.BaudRateDouble = DISABLE;            //波特率加倍, ENABLE或DISABLE
  20   1          COMx_InitStructure.UART_Interrupt = ENABLE;                //中断允许,   ENABLE或DISABLE
  21   1          COMx_InitStructure.UART_Priority  = Priority_0;            //指定中断优先级(低到高) Priority_0,Priorit
             -y_1,Priority_2,Priority_3
  22   1          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;    //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P
             -37,UART1_SW_P16_P17,UART1_SW_P43_P44
  23   1          UART_Configuration(UART1, &COMx_InitStructure);        //初始化串口1 UART1,UART2,UART3,UART4
  24   1      }
  25          
  26          void All_init() {
  27   1          GPIO_config();
  28   1          UART_config();
  29   1          MK_init();
  30   1          Nixie_init();
  31   1          EA = 1;
  32   1      }
  33          
  34          char putchar (char dat) {
  35   1          TX1_write2buff(dat);
  36   1          return dat;
  37   1      }
  38          
  39          void MK_on_keyup(u8 row, u8 col) {
  40   1          printf("%d行，%d列 UP\r\n",(int)row,(int)col);
  41   1          if(row == 0 && col == 0) {
  42   2              leds[0]++;
  43   2          } else if(row == 0 && col == 1) {
  44   2              leds[0]--;
  45   2          }else if(row == 0 && col == 2) {
  46   2              os_send_signal(3);
  47   2          }
  48   1      }
  49          void MK_on_keydown(u8 row, u8 col) {
  50   1          printf("%d行，%d列 Down\r\n",(int)row,(int)col);
C51 COMPILER V9.60.7.0   MAIN                                                              04/28/2023 20:58:28 PAGE 2   

  51   1      }
  52          
  53          //定义我的程序入口
  54          void start() _task_ 0{
  55   1          All_init();
  56   1      
  57   1          os_create_task(1);
  58   1          os_create_task(2);
  59   1        os_create_task(3);
  60   1          os_delete_task(0);
  61   1      }
  62          
  63          void task1() _task_ 1{
  64   1          while(1) {
  65   2              u16 state;
  66   2              MK_scan(&state);
  67   2              os_wait2(K_TMO,4);
  68   2          }
  69   1      }
  70          
  71          void task2() _task_ 2{
  72   1          u8 i;
  73   1          while(1) {
  74   2              for(i = 0; i < 8; i++) {
  75   3                  Nixie_show(i, leds[i]);
  76   3              }
  77   2          }
  78   1      }
  79          
  80          void task3() _task_ 3{
  81   1          while(1) {
  82   2             printf("task_3 start\r\n");
  83   2            os_wait1(K_SIG);
  84   2            printf("task_3 end\r\n");
  85   2          }
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    240    ----
   CONSTANT SIZE    =     62    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
