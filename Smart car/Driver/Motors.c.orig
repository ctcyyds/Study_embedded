#include "Motors.h"

typedef struct {
    u8 enable;//总开关
    u8 lq_enable;
    u8 lh_enable;
    u8 rq_enable;
    u8 rh_enable;
    u8 lq_duty;
    u8 lh_duty;
    u8 rq_duty;
    u8 rh_duty;
} MotorCfg;

static void Motors_config(MotorCfg cfg) {
    PWMx_InitDefine		PWMx_InitStructure;
    // 总配置
    PWMx_InitStructure.PWM_Period   		= PERIOD;	//周期时间,   0~65535
    PWMx_InitStructure.PWM_DeadTime 		= 0;								//死区发生器设置, 0~255
    PWMx_InitStructure.PWM_EnoSelect		= 0;//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
    PWMx_InitStructure.PWM_PS_SW    		= 0;//切换端口

		//////////////// LQ
    if(cfg.lq_enable) {
        PWMx_InitStructure.PWM_EnoSelect		|= ENO4P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
        PWMx_InitStructure.PWM_EnoSelect		|= ENO4N;
        PWMx_InitStructure.PWM_PS_SW    		|= PWM4_SW_P16_P17;//切换端口
    } else {
        PWMx_InitStructure.PWM_EnoSelect		&= ~ENO4P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
				PWMx_InitStructure.PWM_EnoSelect		&= ~ENO4N;
        PWMx_InitStructure.PWM_PS_SW    		&= ~PWM4_SW_P16_P17;//切换端口
    }
		PWMx_InitStructure.PWM_CC4Enable   = cfg.lq_enable ? ENABLE : DISABLE;//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE
    PWMx_InitStructure.PWM_CC4NEnable  = cfg.lq_enable ? ENABLE : DISABLE;//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE
		 // pwm4
    PWMx_InitStructure.PWM4_Mode    		=	CCMRn_PWM_MODE1;	//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
    PWMx_InitStructure.PWM4_SetPriority	= Priority_0;			//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
    PWMx_InitStructure.PWM4_Duty    		= cfg.lq_duty * PERIOD / 100;//PWM4占空比时间, 0~Period
		
		//////////////// RQ
    if(cfg.rq_enable) {
        PWMx_InitStructure.PWM_EnoSelect		|= ENO3P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
        PWMx_InitStructure.PWM_EnoSelect		|= ENO3N;
        PWMx_InitStructure.PWM_PS_SW    		|= PWM3_SW_P14_P15;//切换端口
    } else {
        PWMx_InitStructure.PWM_EnoSelect		&= ~ENO3P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
				PWMx_InitStructure.PWM_EnoSelect		&= ~ENO3N;
        PWMx_InitStructure.PWM_PS_SW    		&= ~PWM3_SW_P14_P15;//切换端口
    }
		PWMx_InitStructure.PWM_CC3Enable   = cfg.rq_enable ? ENABLE : DISABLE;//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE
    PWMx_InitStructure.PWM_CC3NEnable  = cfg.rq_enable ? ENABLE : DISABLE;//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE
    // pwm3
    PWMx_InitStructure.PWM3_Mode    		=	CCMRn_PWM_MODE2;	//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
    PWMx_InitStructure.PWM3_SetPriority	= Priority_0;			//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
    PWMx_InitStructure.PWM3_Duty    		= cfg.rq_duty * PERIOD / 100;//PWM4占空比时间, 0~Period

		//////////////// LH
    if(cfg.lh_enable) {
        PWMx_InitStructure.PWM_EnoSelect		|= ENO1P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
        PWMx_InitStructure.PWM_EnoSelect		|= ENO1N;
        PWMx_InitStructure.PWM_PS_SW    		|= PWM1_SW_P20_P21;//切换端口
    } else {
        PWMx_InitStructure.PWM_EnoSelect		&= ~ENO1P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
				PWMx_InitStructure.PWM_EnoSelect		&= ~ENO1N;
        PWMx_InitStructure.PWM_PS_SW    		&= ~PWM1_SW_P20_P21;//切换端口
    }
		PWMx_InitStructure.PWM_CC1Enable   = cfg.lh_enable ? ENABLE : DISABLE;//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE
    PWMx_InitStructure.PWM_CC1NEnable  = cfg.lh_enable ? ENABLE : DISABLE;//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE
		 // pwm1
    PWMx_InitStructure.PWM1_Mode    		=	CCMRn_PWM_MODE2;	//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
    PWMx_InitStructure.PWM1_SetPriority	= Priority_0;			//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
    PWMx_InitStructure.PWM1_Duty    		= cfg.lh_duty * PERIOD / 100;//PWM4占空比时间, 0~Period
		
		//////////////// RH
    if(cfg.rh_enable) {
        PWMx_InitStructure.PWM_EnoSelect		|= ENO2P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
        PWMx_InitStructure.PWM_EnoSelect		|= ENO2N;
        PWMx_InitStructure.PWM_PS_SW    		|= PWM2_SW_P22_P23;//切换端口
    } else {
        PWMx_InitStructure.PWM_EnoSelect		&= ~ENO2P;	//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
				PWMx_InitStructure.PWM_EnoSelect		&= ~ENO2N;
        PWMx_InitStructure.PWM_PS_SW    		&= ~PWM2_SW_P22_P23;//切换端口
    }
		PWMx_InitStructure.PWM_CC2Enable   = cfg.rh_enable ? ENABLE : DISABLE;//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE
    PWMx_InitStructure.PWM_CC2NEnable  = cfg.rh_enable ? ENABLE : DISABLE;//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE
		 // pwm2
    PWMx_InitStructure.PWM2_Mode    		=	CCMRn_PWM_MODE1;	//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
    PWMx_InitStructure.PWM2_SetPriority	= Priority_0;			//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
    PWMx_InitStructure.PWM2_Duty    		= cfg.rh_duty * PERIOD / 100;//PWM4占空比时间, 0~Period


    ///////////////// PWM启动配置
    PWMx_InitStructure.PWM_MainOutEnable= cfg.enable ? ENABLE : DISABLE;				//主输出使能, ENABLE,DISABLE
    PWMx_InitStructure.PWM_CEN_Enable   = cfg.enable ? ENABLE : DISABLE;				//使能计数器, ENABLE,DISABLE

    PWM_Configuration(PWMA, &PWMx_InitStructure);				//初始化PWM,  PWMA,PWMB
}

void Motors_init() {
    MOTORS_PIN_INIT();
    Motors_stop();
}

// 前进
void Motors_forward() {
    // 四个轮子向前转动
    MotorCfg cfg;
    cfg.enable = 1;//总开关
    cfg.lq_enable = 1;
    cfg.lh_enable = 1;
    cfg.rq_enable = 1;
    cfg.rh_enable = 1;
    cfg.lq_duty = 10;
    cfg.lh_duty = 10;
    cfg.rq_duty = 10;
    cfg.rh_duty = 10;
    Motors_config(cfg);
}
// 后退
void Motors_backward() {
		MotorCfg cfg;
    cfg.enable = 1;//总开关
    cfg.lq_enable = 1;
    cfg.lh_enable = 1;
    cfg.rq_enable = 1;
    cfg.rh_enable = 1;
    cfg.lq_duty = 90;
    cfg.lh_duty = 90;
    cfg.rq_duty = 90;
    cfg.rh_duty = 90;
    Motors_config(cfg);
}
void Motors_left() {
		MotorCfg cfg;
    cfg.enable = 1;//总开关
    cfg.lq_enable = 1;
    cfg.lh_enable = 1;
    cfg.rq_enable = 1;
    cfg.rh_enable = 1;
    cfg.lq_duty = 50;
    cfg.lh_duty = 50;
    cfg.rq_duty = 10;
    cfg.rh_duty = 10;
    Motors_config(cfg);
}
void Motors_right() {
	MotorCfg cfg;
    cfg.enable = 1;//总开关
    cfg.lq_enable = 1;
    cfg.lh_enable = 1;
    cfg.rq_enable = 1;
    cfg.rh_enable = 1;
    cfg.lq_duty = 10;
    cfg.lh_duty = 10;
    cfg.rq_duty = 50;
    cfg.rh_duty = 50;
    Motors_config(cfg);
}
void Motors_around() {
	MotorCfg cfg;
    cfg.enable = 1;//总开关
    cfg.lq_enable = 1;
    cfg.lh_enable = 1;
    cfg.rq_enable = 1;
    cfg.rh_enable = 1;
    cfg.lq_duty = 10;
    cfg.lh_duty = 10;
    cfg.rq_duty = 90;
    cfg.rh_duty = 90;
    Motors_config(cfg);
}

// 停止
void Motors_stop() {
    MotorCfg cfg;
    cfg.enable = 0;//总开关
    cfg.lq_enable = 0;
    cfg.lh_enable = 0;
    cfg.rq_enable = 0;
    cfg.rh_enable = 0;
    cfg.lq_duty = 0;
    cfg.lh_duty = 0;
    cfg.rq_duty = 0;
    cfg.rh_duty = 0;
    Motors_config(cfg);
}