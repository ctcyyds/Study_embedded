C51 COMPILER V9.60.7.0   MAIN                                                              04/30/2023 15:48:02 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\instal\Keil_v5\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\Driver)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          #include "GPIO.h"
   3          #include "UART.h"
   4          #include <stdio.h>
   5          #include "Key.h"
   6          #include "Motors.h"
   7          #include "Track.h"
   8          
   9          
  10          u8 flag = 0;
  11          char putchar (char dat) {
  12   1          TX1_write2buff(dat);
  13   1          return dat;
  14   1      }
  15          
  16          void GPIO_config(void) {
  17   1        GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  18   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;    //指定要初始化的IO,
  19   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  20   1        GPIO_Inilize(GPIO_P3, &GPIO_InitStructure);//初始化
  21   1      }
  22          
  23          void UART_config(void) {
  24   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  25   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  26   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  27   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  28   1          COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  29   1          COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  30   1          COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
  31   1          COMx_InitStructure.UART_Priority  = Priority_0;     //指定中断优先级(低到高) Priority_0,Priority_1,Prior
             -ity_2,Priority_3
  32   1          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,
             -UART1_SW_P16_P17,UART1_SW_P43_P44
  33   1          UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  34   1      }
  35          
  36          
  37          
  38          void sys_init() {
  39   1          GPIO_config();
  40   1          UART_config();
  41   1      
  42   1          Key_init();
  43   1          Motors_init();
  44   1          Track_init();
  45   1          EA = 1;
  46   1      }
  47          
  48          // 定义我的程序入口
  49          void start() _task_ 0 {
C51 COMPILER V9.60.7.0   MAIN                                                              04/30/2023 15:48:02 PAGE 2   

  50   1          sys_init();
  51   1      
  52   1          os_create_task(1);
  53   1          os_delete_task(0);
  54   1      }
  55          
  56          void Key_on_keyup() {
  57   1          if(flag == 0) {
  58   2              printf("启动巡线\r\n");
  59   2              // 按一下启动巡线任务
  60   2              os_create_task(2);
  61   2          } else {
  62   2            printf("停止巡线\r\n");
  63   2              os_delete_task(2);
  64   2              // 再按停止
  65   2              Motors_stop();
  66   2          }
  67   1          flag = !flag;
  68   1      }
  69          void Key_on_keydown() {
  70   1      
  71   1      }
  72          
  73          // 扫描按键状态
  74          void task1() _task_ 1 {
  75   1          while(1) {
  76   2              Key_scan();
  77   2              os_wait2(K_TMO, 4);
  78   2          }
  79   1      }
  80          
  81          // 实时获取线的坐标信息
  82          void task2() _task_ 2 {
  83   1          int pos;
  84   1          printf("task2 start\r\n");
  85   1          while(1) {
  86   2              Track_get_position(&pos);
  87   2              
  88   2              // 判断坐标
  89   2              if(pos == 0) {
  90   3                // 直行
  91   3                Motors_forward(80);
  92   3              } else if(pos < 0) {
  93   3                // 左拐
  94   3                Motors_left(80);
  95   3              } else if(pos > 0) {
  96   3                Motors_right(80);
  97   3              }
  98   2              os_wait2(K_TMO, 1);
  99   2          }
 100   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    265    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =      1      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.7.0   MAIN                                                              04/30/2023 15:48:02 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
